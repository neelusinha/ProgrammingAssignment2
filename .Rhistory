a<-available.packages()
head(rownames(a),3)
head(rownames(a),50)
tasks view
read.table
?read.table
test1<-c(1:5,"6.7", "8,9,10")
tf<-tempfile()
writelines(test1,tf)
writeLines(test1,tf)
?file
x<-4
class(x)
x<-c(4,T)
class(x)
x<-c(1,3,5)
x
y<-c(3,2,10)
y
?cbind
cbind(x,y)
x<-1
x
dim(x)
?vector
attributes(x)
x.attributes
?attributes
x <- list(2, "a", "b", TRUE)
x
x[1]
x[2]
x<-1:4
y<-2:3
x
y
x+y
class(x+y)
class(x)
class(y)
x<1
x<-1
class(x)
x<-1:2
class(x)
x<-c{1,17,4,11,18,2}
x<-c(1,17,4,11,18,2}
x<-c(1,17,4,11,18,2)
x
x[x>=11]<-4
x
read.csv(C:\CS\Coursera\RProgram\Qz1\rprog-data-quiz1_data\hw1_data.csv)
read.csv("C:\CS\Coursera\RProgram\Qz1\rprog-data-quiz1_data\hw1_data.csv")
getcwd()
getwd()
read.csv(hw1_data.csv)
setwd("C:/CS/Coursera/RProgram/Program2/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set <- function(y) {
x<<-y
m<<-NULL
}
get <- function() x
setinv<-function(inverse) inv<<- inverse
getinv<-function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
v<-makeCacheMatrix()
v$set(matrix(1:4,2,2))
v
v$get()
cachesolve(v)
cacheSolve(v)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data<-x$get()
inv<-solve(data)
x$setinv(inv)
inv
}
cacheSolve(v)
cacheSolve(v)
cacheSolve(v)
v$set(matrix(1:9,3,3)
)
v$get()
cacheSolve(v)
x=matrix(1:4,2,2)
x
y<-x
y
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set <- function(y) {
x<<-y
inv<<-NULL
}
get <- function() x
setinv<-function(inverse) inv<<- inverse
getinv<-function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data<-x$get()
inv<-solve(data)
x$setinv(inv)
inv
}
v$set(matrix(1:4,2,2))
v<-makeCacheMatrix()
v$set(matrix(1:4,2,2))
v
v$get()
cacheSolve(v)
v$set(matrix(1:9,3,3))
v$get()
cacheSolve(v)
v$get()
v<-makeCaacheMatrix(matrix(1:4,2,2))
v<-makeCacheMatrix(matrix(1:4,2,2))
v$get()
caccheSolve(v)
cacheSolve(v)
v$get()
v_inv<-cachceSolve(v)
v_inv<-cacheSolve(v)
v_inv
v
v_inv
v_inv$get()
v$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set <- function(y) {
x<<-y
inv<<-NULL
}
get <- function() x
setinv<-function(inverse) inv<<- inverse
getinv<-function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data<-x$get()
inv<-solve(data, ...)
x$setinv(inv)
inv
}
v<-makeCacheMatrix()
v$get()
v$set(matrix(1:4), 2,2))
v$set(matrix((1:4), 2,2))
v$get
v$get()
cacheSolve(v)
w<-cacheSolve(v)
w
vv<$set(matrix((1:9),3,3))
vv$set(matrix((1:9),3,3))
vv<-makeCacheMatrix()
vv$set(matrix((1:9),3,3))
vv$get()
ww<-cacheSolve(vv)
a<-cacheMatrix()
a<-makeCacheMatrix()
a$get()
a$set(matrix(c(-2,1.5,1,-0.5),2,2))
a$get()
ainv<-cacheSolve(a)
ainv
a<-cacheSolve(ainv)
a
v<-makeCacheMatrix()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set <- function(y) {
x<<-y
inv<<-NULL
}
get <- function() x
setinv<-function(inverse) inv<<- inverse
getinv<-function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data<-x$get()
inv<-solve(data, ...)
x$setinv(inv)
inv
}
v<-makeCacheMatrix()
v$set(matrix((1:4),2,2))
v$get()
cacheSolve(v)
cacheSolve(v)
v$set(matrix(c(2,0,0,2),2,2))
v$get()
cacheSolve(v)
cacheSolve(v)
## Programming Assignment 2
## Caching the Inverse of a Matrix
## Two functions - makeCacheMatrix and cacheSolve
## makeCacheMatrix function creates a speical matrix object which can cache
## its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set <- function(y) {
x<<-y
inv<<-NULL
}
get <- function() x
setinv<-function(inverse) inv<<- inverse
getinv<-function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
## cacheSolve function computes the inverse of the "special" matrix returned
## from makeCacheMatrix function. If inverse exists then this just retrieves
## it, otherwise it computes it
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data<-x$get()
inv<-solve(data, ...)
x$setinv(inv)
inv
}
v<-makeCacheMatrix()
v$set(matrix(1:4,2,2))
v$get()
cacheSolve(v)
cacheSolve(v)
